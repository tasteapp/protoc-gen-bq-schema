// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bq_table.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BigQueryMessageOptions struct {
	// Specifies a name of table in BigQuery for the message.
	//
	// If not blank, indicates the message is a type of record to be stored into
	// BigQuery.
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// If true, BigQuery field names will default to a field's JSON name,
	// not its original/proto field name.
	UseJsonNames bool `protobuf:"varint,2,opt,name=use_json_names,json=useJsonNames,proto3" json:"use_json_names,omitempty"`
	// Replaces this entire message with this type.
	TypeOverride         string   `protobuf:"bytes,3,opt,name=type_override,json=typeOverride,proto3" json:"type_override,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BigQueryMessageOptions) Reset()         { *m = BigQueryMessageOptions{} }
func (m *BigQueryMessageOptions) String() string { return proto.CompactTextString(m) }
func (*BigQueryMessageOptions) ProtoMessage()    {}
func (*BigQueryMessageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_54f9c1df63ca9ac7, []int{0}
}

func (m *BigQueryMessageOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BigQueryMessageOptions.Unmarshal(m, b)
}
func (m *BigQueryMessageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BigQueryMessageOptions.Marshal(b, m, deterministic)
}
func (m *BigQueryMessageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigQueryMessageOptions.Merge(m, src)
}
func (m *BigQueryMessageOptions) XXX_Size() int {
	return xxx_messageInfo_BigQueryMessageOptions.Size(m)
}
func (m *BigQueryMessageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BigQueryMessageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BigQueryMessageOptions proto.InternalMessageInfo

func (m *BigQueryMessageOptions) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *BigQueryMessageOptions) GetUseJsonNames() bool {
	if m != nil {
		return m.UseJsonNames
	}
	return false
}

func (m *BigQueryMessageOptions) GetTypeOverride() string {
	if m != nil {
		return m.TypeOverride
	}
	return ""
}

var E_BigqueryOpts = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*BigQueryMessageOptions)(nil),
	Field:         1021,
	Name:          "gen_bq_schema.bigquery_opts",
	Tag:           "bytes,1021,opt,name=bigquery_opts",
	Filename:      "bq_table.proto",
}

func init() {
	proto.RegisterType((*BigQueryMessageOptions)(nil), "gen_bq_schema.BigQueryMessageOptions")
	proto.RegisterExtension(E_BigqueryOpts)
}

func init() { proto.RegisterFile("bq_table.proto", fileDescriptor_54f9c1df63ca9ac7) }

var fileDescriptor_54f9c1df63ca9ac7 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xbf, 0x4b, 0xc4, 0x30,
	0x18, 0x86, 0xa9, 0x82, 0xde, 0xc5, 0xeb, 0x0d, 0x19, 0xa4, 0x08, 0x62, 0xf1, 0x07, 0x74, 0xca,
	0x81, 0x6e, 0x8e, 0x37, 0x0a, 0x5a, 0xec, 0xe8, 0x12, 0x92, 0xbb, 0xcf, 0x18, 0x69, 0xf3, 0xa5,
	0xf9, 0x52, 0xe1, 0x56, 0xff, 0x6f, 0x41, 0x9a, 0x7a, 0xc3, 0x81, 0x53, 0xe0, 0xcd, 0xfb, 0x3d,
	0x3c, 0x2f, 0x5b, 0xea, 0x5e, 0x46, 0xa5, 0x5b, 0x10, 0x3e, 0x60, 0x44, 0x9e, 0x1b, 0x70, 0x52,
	0xf7, 0x92, 0x36, 0x1f, 0xd0, 0xa9, 0x8b, 0xd2, 0x20, 0x9a, 0x16, 0x56, 0xe9, 0x53, 0x0f, 0xef,
	0xab, 0x2d, 0xd0, 0x26, 0x58, 0x1f, 0x31, 0x4c, 0x07, 0xd7, 0xdf, 0x19, 0x3b, 0x5f, 0x5b, 0xf3,
	0x3a, 0x40, 0xd8, 0x3d, 0x03, 0x91, 0x32, 0x50, 0xfb, 0x68, 0xd1, 0x11, 0xbf, 0x64, 0x2c, 0xa1,
	0xa5, 0x53, 0x1d, 0x14, 0x59, 0x99, 0x55, 0xf3, 0x66, 0x9e, 0x92, 0x17, 0xd5, 0x01, 0xbf, 0x65,
	0xcb, 0x81, 0x40, 0x7e, 0x12, 0xba, 0xd4, 0xa0, 0xe2, 0xa8, 0xcc, 0xaa, 0x59, 0xb3, 0x18, 0x08,
	0x9e, 0x08, 0xdd, 0x58, 0x22, 0x7e, 0xc3, 0xf2, 0xb8, 0xf3, 0x20, 0xf1, 0x0b, 0x42, 0xb0, 0x5b,
	0x28, 0x8e, 0x13, 0x67, 0x31, 0x86, 0xf5, 0x5f, 0xf6, 0xd8, 0xb2, 0x5c, 0x5b, 0xd3, 0x8f, 0x0e,
	0x12, 0x7d, 0x24, 0x7e, 0x25, 0x26, 0x71, 0xb1, 0x17, 0x17, 0x87, 0x6e, 0xc5, 0xcf, 0x69, 0x99,
	0x55, 0x67, 0xf7, 0x77, 0xe2, 0x60, 0xaf, 0xf8, 0x7f, 0x49, 0xb3, 0xd8, 0xd3, 0x6b, 0x1f, 0x69,
	0x3d, 0x7b, 0x3b, 0x49, 0x58, 0xd2, 0xd3, 0xfb, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc8,
	0x3b, 0x70, 0x46, 0x01, 0x00, 0x00,
}
